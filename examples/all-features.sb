#!/usr/bin/env sbash

#^ This is the short description for the whole script
#^
#^ The long description will include this entire block of text. Try running
#^ `./all-features.sb --help`
#^
#^ An empty doc comment line will start a new paragraph. Doc comments come in
#^ 3 flavours:
#^
#^ `#^` attaches the doc comment to the parent. This is only valid for the
#^ overall script documentation.
#^
#^ The other 2 types of doc comments are valid for functions and arguments:
#^
#^ `#>` attaches to the item following.
#^
#^ `#<` attaches to the item preceding.

#> This is a private function.
#>
#> It won't appear as a command line option.
fn a-private-function() {
    # The body of a function is just a bash script
    echo "Hello from a-private-function"
}

#> This is a public function.
#>
#> A public function will appear a command line option.
#> Try `./all-features.sb a-public-function --help`
pub fn a-public-function() {
    # Functions are compiled to normal bash functions, so we can call them 
    # from other functions:
    echo "Hello from a-public-function"
    echo "Calling a-private-function"
    a-private-function
}

#> Normally, each function runs in it's own subshell, so any
#> variable/directory changes don't escape the function scope. `inline`
#> functions don't run in a subshell.
inline fn an-inline-function() {
    my-variable="This variable will be set in the calling function"
    echo Hello from an-inline-function
}

pub inline fn public-functions-can-be-inline-too() {
    echo Hello from public-functions-can-be-inline-too
}

#> A function can have arguments
#>
#> Try `./all-features.sb a-function-with-arguments --help` to see
#> documentation for the arguments 
pub fn a-function-with-arguments(
    first_arg,
        #< This is how you document arguments. This is documentation for
        #< `first-arg`
    #> Or you can document them like this if you prefer. This is documentation
    #> for `second-arg`.
    second_arg
) {
    echo Hello from a-function-with-arguments
    # Arguments are passed to the function as environment variables
    echo First arg: "$first_arg"
    echo Second arg: "$second_arg"
}

#> A function can forward any extra arguments using `$@` as it's last argument
#>
#> Try `./all-features.sb forwarding-arguments 1 2 3 4 5`
pub fn forwarding-arguments(first_arg, second_arg, $@) {
    echo First arg: "$first_arg"
    echo Second arg: "$second_arg"
    echo Remaining arguments:

    for arg in "$@"; do
        echo "$arg"
    done
}
